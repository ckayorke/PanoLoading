@{
    ViewBag.Title = "Customer Room Viewer";
}
<style>
    html {
        overflow-x: hidden;
        overflow-y: hidden;
    }

    body {
        background-color: #000000;
        margin: 0px;
        overflow: hidden;
        touch-action: none;
        padding-top: 0px;
        padding-bottom: 0px;
    }

    #info {
        position: absolute;
        bottom: 0px;
        width: 30%;
        color: #ffffff;
        padding: 5px;
        font-family: Monospace;
        font-size: 13px;
        font-weight: bold;
        text-align: center;
    }

    a {
        color: #ffffff;
    }

    .body-content {
        padding-left: 0px;
        padding-right: 0px;
    }

    .container {
        max-width: 100%;
    }

    .container {
        max-width: 100%;
    }

    .container {
        padding-right: 0px;
        padding-left: 0px;
        margin-right: 0;
        margin-left: 0;
        overflow: hidden;
    }

    hr, footer,  #url, #nam{
        display: none;
    }  
    #bar {
        display: block;
        position: absolute;
        z-index: 2;
        top: 30px;
        left: 30px;
    }    
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<div id="url">@ViewBag.MyString</div>
<div id="nam">@ViewBag.Name</div>

<div id="bar">
    <button class="btn" onclick="takePicture()"><i class="fa fa-camera" aria-hidden="true"></i></button>
    <button class="btn" onclick="ButtonMouseWheel(100)"><i class="fa fa-search-minus" aria-hidden="true"></i></button>
    <button class="btn" onclick="ButtonMouseWheel(-100)"><i class="fa fa-search-plus" aria-hidden="true"></i></button>
    <button class="btn" onclick="ButtonLongRotate(5)"><i class="fa fa-arrow-left" aria-hidden="true"></i></button>
    <button class="btn" onclick="ButtonLongRotate(-5)"><i class="fa fa-arrow-right" aria-hidden="true"></i></button>
    <button class="btn" onclick="ButtonLatRotate(5)"><i class="fa fa-arrow-down" aria-hidden="true"></i></button>
    <button class="btn" onclick="ButtonLatRotate(-5)"><i class="fa fa-arrow-up" aria-hidden="true"></i></button>
    
</div>     
<div id="container2">
</div>
<script>  
    var picCounter = 1;
    document.getElementById("url").style.display = "none";
    document.getElementById("nam").style.display = "none";
    var url = document.getElementById("url").innerText.trim();
    var nam = document.getElementById("nam").innerText.trim();
    nam = nam.replace('"', '');
    nam = nam.replace('"', '');
	var camera, scene, renderer;
	var isUserInteracting = false;
	var	onMouseDownMouseX = 0;
	var onMouseDownMouseY = 0;
	var lon = 0;
	var onMouseDownLon = 0;
	var lat = 0;
	var onMouseDownLat = 0;
	var phi = 0;
    var  theta = 0;
	init();
	function init() {	    
		var container, mesh;
		container = document.getElementById( 'container2' );
		camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 1100 );
		camera.target = new THREE.Vector3( 0, 0, 0 );
		scene = new THREE.Scene();
		var geometry = new THREE.SphereBufferGeometry( 500, 60, 40 );		
		geometry.scale( - 1, 1, 1 );
		var material = new THREE.MeshBasicMaterial( {
		    map: new THREE.TextureLoader().load(url)
		} );
		mesh = new THREE.Mesh( geometry, material );
		scene.add( mesh );
		//renderer = new THREE.WebGLRenderer();
		renderer = new THREE.WebGLRenderer({
		    preserveDrawingBuffer: true
		});
		renderer.setPixelRatio( window.devicePixelRatio );
		renderer.setSize( window.innerWidth, window.innerHeight );
		container.appendChild( renderer.domElement );

		document.addEventListener( 'mousedown', onPointerStart, false );
		document.addEventListener( 'mousemove', onPointerMove, false );
		document.addEventListener( 'mouseup', onPointerUp, false );
		document.addEventListener( 'wheel', onDocumentMouseWheel, false );
		document.addEventListener( 'touchstart', onPointerStart, false );
		document.addEventListener( 'touchmove', onPointerMove, false );
		document.addEventListener( 'touchend', onPointerUp, false );

		document.addEventListener( 'dragover', function ( event ) {
			event.preventDefault();
			event.dataTransfer.dropEffect = 'copy';
		}, false );

		document.addEventListener( 'dragenter', function () {
			document.body.style.opacity = 0.5;
		}, false );

		document.addEventListener( 'dragleave', function () {
			document.body.style.opacity = 1;
		}, false );

		document.addEventListener( 'drop', function ( event ) {
			event.preventDefault();
			var reader = new FileReader();
			reader.addEventListener( 'load', function ( event ) {
				material.map.image.src = event.target.result;
				material.map.needsUpdate = true;

			}, false);

		     reader.readAsDataURL( event.dataTransfer.files[ 0 ] )
			  document.body.style.opacity = 1;

		}, false );

		window.addEventListener('resize', onWindowResize, false);
		animate();
		
	}

	function onWindowResize() {

		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
		renderer.setSize( window.innerWidth, window.innerHeight );
	}

	function onPointerStart( event ) {
		isUserInteracting = true;
		var clientX = event.clientX || event.touches[ 0 ].clientX;
		var clientY = event.clientY || event.touches[ 0 ].clientY;
		onMouseDownMouseX = clientX;
		onMouseDownMouseY = clientY;
		onMouseDownLon = lon;
		onMouseDownLat = lat;



	}

	function onPointerMove( event ) {
		if ( isUserInteracting === true ) {
			var clientX = event.clientX || event.touches[ 0 ].clientX;
			var clientY = event.clientY || event.touches[ 0 ].clientY;

			lon = ( onMouseDownMouseX - clientX ) * 0.1 + onMouseDownLon;
			lat = ( clientY - onMouseDownMouseY ) * 0.1 + onMouseDownLat;
		}

	}
	function onPointerUp() {
		isUserInteracting = false;
	}
	function onDocumentMouseWheel( event ) {
		var fov = camera.fov + event.deltaY * 0.05;
		camera.fov = THREE.Math.clamp( fov, 10, 75 );
		camera.updateProjectionMatrix();
	}

	function ButtonMouseWheel(value) {
	    var fov = camera.fov + value * 0.05;
	    camera.fov = THREE.Math.clamp(fov, 10, 75);
	    camera.updateProjectionMatrix();
	}


	function animate() {
		requestAnimationFrame( animate );
		update();
	}
	function update() {
		if( isUserInteracting === false ) {
				//lon += 0.1;
		}
		lat = Math.max( - 85, Math.min( 85, lat ) );
		phi = THREE.Math.degToRad( 90 - lat );
		theta = THREE.Math.degToRad(lon);

		camera.target.x = 500 * Math.sin( phi ) * Math.cos( theta );
		camera.target.y = 500 * Math.cos( phi );
		camera.target.z = 500 * Math.sin(phi) * Math.sin(theta);
		camera.lookAt( camera.target );
		/*
		// distortion
		camera.position.copy( camera.target ).negate();
		*/
		renderer.render( scene, camera );
	}

	function ButtonLongRotate(value) {
	    lon += value;
	}

	function ButtonLatRotate(value) {
	    lat += value;
	}
	function takePicture() {
	    saveAsImage();
	}

	function saveAsImage() {
	   
	    var strDownloadMime = "image/octet-stream";
	    var imgData, imgNode;
	    try {
	        var name = nam + "_" + picCounter + ".jpg"
	        var strMime = "image/jpeg";
	        imgData = renderer.domElement.toDataURL(strMime);
	        saveFile(imgData.replace(strMime, strDownloadMime), name);
	        picCounter = picCounter + 1;
	    }
	    catch (e) {
	        console.log(e);
	        return;
	    }
	}

	var saveFile = function (strData, filename) {
	    var link = document.createElement('a');
	    if (typeof link.download === 'string') {
	        document.body.appendChild(link); 
	        link.download = filename;
	        link.href = strData;
	        link.click();
	        document.body.removeChild(link); 
	    } else {
	        location.replace(uri);
	    }
	}
</script>